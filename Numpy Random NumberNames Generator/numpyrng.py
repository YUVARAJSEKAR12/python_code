# -*- coding: utf-8 -*-
"""Numpyrng.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zSmvQLjTGx5pb7XVB92ItPQOByYif8Wz
"""

import numpy as np
# Initialize random number generator
rng = np.random.default_rng()
# Generate random integers between 1 and 2 (inclusive)
num_records = 10
random_numbers = rng.integers(1, 3, size=num_records)
print(random_numbers)


#float cant be given
import numpy as np
# Initialize random number generator
rng = np.random.default_rng()
# Generate random floating-point numbers between 1 and 3
num_records = 10
random_numbers = rng.uniform(1, 3, size=num_records)
print(random_numbers)

import numpy as np# Generate 10 unique random integers between 1 and 100

# Initialize random number generator
rng = np.random.default_rng()
num_records = 10
unique_integers = rng.choice(np.arange(1, 101), size=num_records, replace=False)
print(unique_integers)

#names
import numpy as np

rng = np.random.default_rng()
name_list = ["John", "Alice",  "Sophia", "Liam", "Emma", "Noah", "Olivia", "James", "Mia"]
num_records = 10
# Generate random names by selecting from the name_list
random_names = rng.choice(name_list, size=num_records, replace=True)
print(random_names)

import numpy as np
arr = np.arange(10)
print("The array over the given range is ",arr)


import numpy as np
arr = np.arange(0,10,2,float)
print(arr)

import numpy as np
arr = np.arange(10,100,5,float)
print("The array over the given range is ",arr)

import numpy as np# Generate 10 unique random integers between 1 and 100
# Initialize random number generator
rng = np.random.default_rng()
num_records = 10
unique_integers = rng.choice(np.arange(1, 101), size=num_records, replace=False)
print(unique_integers)

#ML sales 15 data
import numpy as np
from numpy import random
import pandas as pd
def name():
    arr = ['Arun', 'Akash', 'Sanjay', 'Manu']
    n=np.random.choice(arr, 15, p=[0.5, 0.1, 0.1, 0.3])
    return n
def month():
    m1 = random.choice([1,2,3,4,5,6,7,8,9,10,11,12], p=[0.1, 0.1, 0.1, 0.1,0.1,0.1,0.1, 0.1, 0.05, 0.05,0.05,0.05], size=(15))
    return m1
def id():
    id = np.arange(15)
def unitprice():
     x = np.random.rand(15)
     x1=x*1000
     unit = np.round(x1, decimals=0)
     return unit
def quan():
    y = random.uniform(size=(15))
    y1=y*100
    q = np.round(y1, decimals=0)
    return q
def location():
    country_names = ["USA", "Canada", "UK", "Germany", "France", "Japan", "Australia"]
    c=np.random.choice(country_names, 15, p=[0.3, 0.1, 0.1, 0.1,0.1,0.1,0.2])
    return c
def coustomerid():
    z = np.arange(300, 320)
    x = random.choice(z, p=[0.05]*len(z), size=(15))
    return x
def prodid():
    y = random.uniform(size=(15))
    y1=y*100
    p = np.round(y1, decimals=2)
    np.random.shuffle(p)
    return p
def storeid():
    z = np.arange(1300, 1320)
    x = random.choice(z, p=[0.05]*len(z), size=(15))
    return x
def storesize():
    arr = ['Premium', 'Branded', 'Valueformoney', 'Economy','Sale','Factoryoutlet','Retail']
    n=np.random.choice(arr, 15, p=[0.2, 0.1, 0.1, 0.2,0.1,0.2,0.1])
    return n
def closetime():
    ohrs1 = random.choice([21,22,23,20], p=[0.2, 0.2, 0.2, 0.4], size=(15))
    return ohrs1
def adv():#advertise rating star
    adv=random.choice([1,2,3,4,5], p=[0.2, 0.2, 0.2, 0.2,0.2], size=(15))
    return adv

def com():#competetor price
    com=random.choice(["High","Low","Equal"], p=[0.2, 0.2, 0.6], size=(15))
    return com
def sup():#supply
    sup=random.choice(["Surplus","LowStock","StockAvailable"], p=[0.2, 0.2, 0.6], size=(15))
    return sup
def paytype():
    pay=random.choice(["CreditCard","DebitCard","Cash","UPI","EMI"], p=[0.4, 0.1, 0.1,0.1,0.3], size=(15))
    return pay
def profit():#profit in per
    profit=random.choice([10,15,5,20,25], p=[0.4, 0.1, 0.1,0.1,0.3], size=(15))
    return profit
def feedback():
    feed=random.choice([1,2,3,4,5], p=[0.2, 0.2, 0.2, 0.2,0.2], size=(15))
    return feed

def infra():
    infra=random.choice(["Own","Rented", "Sponsored"], p=[0.2, 0.5, 0.3], size=(15))
    return infra
def parking():
    park=random.choice(["Spacious","Available", "NotAvailable"], p=[0.2, 0.5, 0.3], size=(15))
    return park
def emp():
    emp=random.choice(["50+","below_50", "100+"], p=[0.2, 0.5, 0.3], size=(15))
    return emp
name=name()
month=month()
price=unitprice()
Q=quan()
L=location()
cid=coustomerid()
pid=prodid()
sid=storeid()
storesize=storesize()
closetime=closetime()
a=adv()#advertisement
c=com()#competetor price
supply=sup()#supply
payment=paytype()
profit=profit()
feedb=feedback()
infra=infra()
parking=parking()
emp=emp()
frame = {
    "StoreID": sid,
    "StoreSize": storesize,
    "Parking": parking,
    "ClosingTime": closetime,
    "Month": month,
    "CustomerID": cid,
    "ProductID": pid,
    "UnitPrice": price,
    "Quantity": Q,
    "CompetitorPrice": c,
    "Supply": supply,
    "Profit_percentage": profit,
    "Advertisementstar": a,
    "PaymentType": payment,
    "Employee": emp,
    "Feedbackstar": feedb
}
dfsales=pd.DataFrame(frame)
print(dfsales)
dfsales.to_excel('sales1.xlsx', index=False)